package JavaBasics;

public class JavaCollection {
    public static void main(String[] args) {
// What is Java Collections Framework (JCF)?
// The Java Collections Framework is a set of classes and interfaces that implement commonly reusable data structures like:

// Lists
// Sets
// Queues
// Maps

// It helps developers store, access, manipulate, and organize data efficiently.

// âœ… Why do we use Collections in Java?
// Dynamic Data Structures
// Unlike arrays, collections can grow or shrink dynamically.

// Built-in Methods
// Collections provide powerful methods like add(), remove(), contains(), sort(), etc.

// Code Reusability
// You donâ€™t need to write data structure logic from scratch (e.g., linked list or hash table logic).

// Performance Optimization
// Collections are well-tested, optimized, and used in real-world Java apps.

// Interfaces for Flexibility
// You can switch from one type to another easily using interfaces like List, Set, Map.

// ðŸ”— Hierarchy of Java Collections
// There are two main root interfaces:

// Collection â†’ for storing individual elements

// Map â†’ for storing key-value pairs

// Hereâ€™s how they break down:


// 1. Collection
//    â”œâ”€â”€ List (ordered, allows duplicates)
//    â”‚   â”œâ”€â”€ ArrayList
//    â”‚   â”œâ”€â”€ LinkedList
//    â”‚   â””â”€â”€ Vector / Stack
//    â”œâ”€â”€ Set (no duplicates)
//    â”‚   â”œâ”€â”€ HashSet
//    â”‚   â””â”€â”€ LinkedHashSet
//    â””â”€â”€ Queue (FIFO)
//        â””â”€â”€ PriorityQueue

// 2. Map (key-value pairs)
//    â”œâ”€â”€ HashMap
//    â”œâ”€â”€ LinkedHashMap
//    â””â”€â”€ TreeMap

// ðŸ§  When to use what?

// Interface/Class	                         Use Case

// ArrayList	                  Fast random access, dynamic array
// LinkedList	                    Fast insert/delete from ends
// HashSet	                      Unique elements, no specific order
// LinkedHashSet	          Unique elements, maintains insertion order
// HashMap	                   Key-value pairs, fast access via key
// TreeMap	                         Sorted key-value pairs
// Stack	                            LIFO operations
// Queue / Deque	                 FIFO / double-ended queue
    }
}
